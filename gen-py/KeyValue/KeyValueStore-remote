#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import KeyValueStore
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  GetValueResponse get(string key)'
  print '  string get_predecessor()'
  print '  string get_successor()'
  print '  string get_successor_for_key(string key)'
  print '  SuccessorListResponse get_successor_list()'
  print '  DataResponse get_init_data(string hash)'
  print '  ChordStatus put(string key, string value)'
  print '  ChordStatus notify(string node)'
  print '  ChordStatus notify_predecessor(string node)'
  print '  void print_details()'
  print '  void print_successor_list()'
  print '  ChordStatus ping()'
  print '  ChordStatus replicate(string key, string value, string source)'
  print '  ReplicasListResponse get_replicate_list()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = KeyValueStore.Client(protocol)
transport.open()

if cmd == 'get':
  if len(args) != 1:
    print 'get requires 1 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],))

elif cmd == 'get_predecessor':
  if len(args) != 0:
    print 'get_predecessor requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_predecessor())

elif cmd == 'get_successor':
  if len(args) != 0:
    print 'get_successor requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_successor())

elif cmd == 'get_successor_for_key':
  if len(args) != 1:
    print 'get_successor_for_key requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_successor_for_key(args[0],))

elif cmd == 'get_successor_list':
  if len(args) != 0:
    print 'get_successor_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_successor_list())

elif cmd == 'get_init_data':
  if len(args) != 1:
    print 'get_init_data requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_init_data(args[0],))

elif cmd == 'put':
  if len(args) != 2:
    print 'put requires 2 args'
    sys.exit(1)
  pp.pprint(client.put(args[0],args[1],))

elif cmd == 'notify':
  if len(args) != 1:
    print 'notify requires 1 args'
    sys.exit(1)
  pp.pprint(client.notify(args[0],))

elif cmd == 'notify_predecessor':
  if len(args) != 1:
    print 'notify_predecessor requires 1 args'
    sys.exit(1)
  pp.pprint(client.notify_predecessor(args[0],))

elif cmd == 'print_details':
  if len(args) != 0:
    print 'print_details requires 0 args'
    sys.exit(1)
  pp.pprint(client.print_details())

elif cmd == 'print_successor_list':
  if len(args) != 0:
    print 'print_successor_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.print_successor_list())

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'replicate':
  if len(args) != 3:
    print 'replicate requires 3 args'
    sys.exit(1)
  pp.pprint(client.replicate(args[0],args[1],args[2],))

elif cmd == 'get_replicate_list':
  if len(args) != 0:
    print 'get_replicate_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_replicate_list())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
